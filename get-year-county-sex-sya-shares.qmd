---
editor_options: 
  chunk_output_type: console
editor:
  markdown:
    canonical: true  
---

# Get year-county-sex-sya-shares

sya stands for single-year-of-age


## Setup

```{r}
#| label: setup

source(here::here("setup.R"))
```

```{r}
#| label: constants

mage_order <- c(
  "<15",
  "15-17",
  "18-19",
  "20-24",
  "25-29",
  "30-34",
  "35-39",
  "40-44",
  "45+",
  "Unknown",
  "Total"
)

```


## Start population: Create seamless year-county-sex-sya population shares (sya is single year of age)

Population by year, county, single year of age, and sex.

We'll use shares of county totals to allocate population control totals to these groups.

While we only NEED the latest year I want a time series so that we can see how well we do estimating births and deaths with these data

-   1990-2019 from [CDC Wonder](https://wonder.cdc.gov/bridged-race-population.html) file -- 2020 vintage; Cornell used 2017 vintage for their 2018 estimates (their latest year was 2015, mine will be 2024). CDC will not create this after the 1990-2020 vintage.
-   2020-2023 from latest Census year-county-sex-sya file found from [here](https://www.census.gov/data/tables/time-series/demo/popest/2020s-counties-detail.html) -- source details below
-   2024 -- ASSUME shares are same as in 2023

### Source for 2020+ year-county-sex-sya data

Go to the [county details landing page](https://www.census.gov/data/tables/time-series/demo/popest/2020s-counties-detail.html), page down for the single year of age tables, and get the [NY file cc-est2023-syasex-36.csv](https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/asrh/cc-est2023-syasex-36.csv). As of 6/12/2025 this is available for 2020 to 2023 (but not yet 2024).


### Pre-2020: CDC single-year of age by sex data

```{r}
#| label: get-start
#| eval: true

# fname <- "1990-2017 year state county sex age estimates for NY Washington County.txt"
fname <- "1990-2020 year state county sex age estimates for NY Washington County.txt"
fpath <- fs::path(DCDC, fname)

# "Notes"	"Yearly July 1st Estimates"	"Yearly July 1st Estimates Code"	"State"	"State Code"	"County"	"County Code"	"Sex"	"Sex Code"	"Age"	"Age Code"	Population
# everything is quoted but for population

# use fread because of the complexity of the input data

dt <- data.table::fread(
  fpath,
  skip = 1, # skip junk row(s) at the start
  nrows = 1e9, # adjust as needed to avoid junk rows at the end
  colClasses = "character",
  quote = "\""
) # the warning message is generated by notes rows at end -- ok to ignore

df <- dt |>
  as_tibble() |>
  select(
    year = V3,
    stfips = V5,
    state = V4,
    cntyfips = V7,
    county = V6,
    sex = V9,
    agec = V11,
    pop = V12
  ) |>
  mutate(
    year = as.integer(year),
    pop = as.numeric(pop),
    age = str_remove(agec, coll("+")) |> as.integer()
  )
count(df, age, agec) |> ht()

df |>
  summarise(pop = sum(pop), .by = year) |>
  ggplot(aes(year, pop)) +
  geom_line() +
  geom_point()

# saveRDS(df, fs::path(DDATA, "pop_start.rds"))

```

### Census single-year of age by sex data

```{r}
#| label: census-sex-sya

# this is NOT sya but rather grouped age!! cc-est2023-agesex-36.csv
df <- vroom::vroom(
  fs::path(DCENPOP, "2020-plus", "cc-est2023-syasex-36.csv"),
  col_types = cols(.default = col_character())
)

# The key for the YEAR variable is as follows:
# 1 = 4/1/2020 population estimates base
# 2 = 7/1/2020 population estimate
# 3 = 7/1/2021 population estimate
# 4 = 7/1/2022 population estimate
# 5 = 7/1/2023 population estimate

df1 <- df |>
  rename_with(str_to_lower) |>
  select(
    stfips = state,
    cntyfips = county,
    iyear = year,
    area = ctyname,
    age,
    pop = tot_pop,
    popm = tot_male,
    popf = tot_female
  ) |>
  mutate(
    iyear = as.integer(iyear),
    age = as.integer(age),
    across(c(pop, popm, popf), as.numeric)
  ) |>
  filter(iyear > 1) |>
  mutate(year = 2018 + iyear)

summary(df1)

# check male + female = total
df1 |> filter(pop != (popm + popf))

df2 <- df1 |>
  select(stfips, cntyfips, area, year, age, popm, popf) |>
  pivot_longer(cols = c(popm, popf)) |>
  mutate(share = value / sum(value), .by = c(stfips, cntyfips, area, year))
summary(df2)

# washington county check
df2 |>
  filter(cntyfips == "115") |>
  summarise(value = sum(value), share = sum(share))

saveRDS(df2, fs::path(DWORK, "cenpop_sya_sex.rds"))

```